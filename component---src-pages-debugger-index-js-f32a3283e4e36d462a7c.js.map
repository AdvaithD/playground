{"version":3,"sources":["webpack:///component---src-pages-debugger-index-js-f32a3283e4e36d462a7c.js","webpack:///./src/pages/debugger/img/p1/overview.png","webpack:///./src/pages/debugger/index.js"],"names":["webpackJsonp","542","module","exports","__webpack_require__","p","230","_interopRequireDefault","obj","__esModule","default","_react","_react2","_Main","_Main2","_DevHomework","_DevHomework2","_DownloadLink","_DownloadLink2","_ImgCaption","_ImgCaption2","_overview","_overview2","Tutorial","createElement","content","src","alt","caption","Homework","title","className","href","target","rel","currentPageNum","tutorial","homework"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,EAASC,GCHjCF,EAAAC,QAAAC,EAAAC,EAAA,gCDSMC,IACA,SAAUJ,EAAQC,EAASC,GAEhC,YA4BA,SAASG,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,QAASF,GA1BvFL,EAAQM,YAAa,CEdtB,IAAAE,GAAAP,EAAA,GFkBKQ,EAAUL,EAAuBI,GEjBtCE,EAAAT,EAAA,IFqBKU,EAASP,EAAuBM,GEpBrCE,EAAAX,EAAA,IFwBKY,EAAgBT,EAAuBQ,GEvB5CE,EAAAb,EAAA,IF2BKc,EAAiBX,EAAuBU,GE1B7CE,EAAAf,EAAA,IF8BKgB,EAAeb,EAAuBY,GE3B3CE,EAAAjB,EAAA,KF+BKkB,EAAaf,EAAuBc,GE7BnCE,EAAW,iBACfX,GAAAF,QAAAc,cAAA,WACEZ,EAAAF,QAAAc,cAAA,8CAEAZ,EAAAF,QAAAc,cAAA,SACEZ,EAAAF,QAAAc,cAAA,0CAEFZ,EAAAF,QAAAc,cAAA,qkBASAZ,EAAAF,QAAAc,cAAA,4JAEyD,IACvDZ,EAAAF,QAAAc,cAAAN,EAAAR,SAAce,QAAQ,kBAAtB,6BAHF,KAKAb,EAAAF,QAAAc,cAAA,8EACqE,IACnEZ,EAAAF,QAAAc,cAAA,gCAFF,aAGEZ,EAAAF,QAAAc,cAAA,6BAHF,oCAG8D,KAE9DZ,EAAAF,QAAAc,cAAA,8GAIAZ,EAAAF,QAAAc,cAAAJ,EAAAV,SAAYgB,IAAAJ,EAAAZ,QAAeiB,IAAI,WAAWC,QAAQ,8CAClDhB,EAAAF,QAAAc,cAAA,mQAKAZ,EAAAF,QAAAc,cAAA,uMAIAZ,EAAAF,QAAAc,cAAA,sGAIEK,EAAW,iBACfjB,GAAAF,QAAAc,cAAAR,EAAAN,SAAaoB,MAAM,6BACjBlB,EAAAF,QAAAc,cAAA,gfAQAZ,EAAAF,QAAAc,cAAA,0HAIAZ,EAAAF,QAAAc,cAAA,MAAIO,UAAU,QACZnB,EAAAF,QAAAc,cAAA,UACEZ,EAAAF,QAAAc,cAAA,KACEQ,KAAK,4DACLC,OAAO,SACPC,IAAI,uBAHN,oBAQFtB,EAAAF,QAAAc,cAAA,4BACiBZ,EAAAF,QAAAc,cAAA,gCADjB,cACyDZ,EAAAF,QAAAc,cAAA,gCADzD,gBAIAZ,EAAAF,QAAAc,cAAA,8DACAZ,EAAAF,QAAAc,cAAA,mDFsGLrB,GAAQO,QEjGM,iBAAME,GAAAF,QAAAc,cAAAV,EAAAJ,SAAMyB,eAAgB,EAAGC,SAAUxB,EAAAF,QAAAc,cAACD,EAAD,MAAcc,SAAUzB,EAAAF,QAAAc,cAACK,EAAD,SFqG/E3B,EAAOC,QAAUA,EAAiB","file":"component---src-pages-debugger-index-js-f32a3283e4e36d462a7c.js","sourcesContent":["webpackJsonp([136876265974512],{\n\n/***/ 542:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__.p + \"static/overview.82a986f9.png\";\n\n/***/ }),\n\n/***/ 230:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _react = __webpack_require__(1);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _Main = __webpack_require__(44);\n\t\n\tvar _Main2 = _interopRequireDefault(_Main);\n\t\n\tvar _DevHomework = __webpack_require__(12);\n\t\n\tvar _DevHomework2 = _interopRequireDefault(_DevHomework);\n\t\n\tvar _DownloadLink = __webpack_require__(16);\n\t\n\tvar _DownloadLink2 = _interopRequireDefault(_DownloadLink);\n\t\n\tvar _ImgCaption = __webpack_require__(56);\n\t\n\tvar _ImgCaption2 = _interopRequireDefault(_ImgCaption);\n\t\n\tvar _overview = __webpack_require__(542);\n\t\n\tvar _overview2 = _interopRequireDefault(_overview);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar Tutorial = function Tutorial() {\n\t  return _react2.default.createElement(\n\t    'div',\n\t    null,\n\t    _react2.default.createElement(\n\t      'h2',\n\t      null,\n\t      'Introduction to Firefox Debugger'\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      _react2.default.createElement(\n\t        'strong',\n\t        null,\n\t        'Stop using console.log!'\n\t      )\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'Are you still using console.log to debug your JavaScript code? It is OK to admit. Using console.log is easy and convenient, but it has limitations. It isn\\u2019t great for catching things as they happen, or diving deep into code to see exactly where it is broken. To do that, you\\u2019ll need a full-featured debugger. The Firefox Debugger has comprehensive tools to evaluate and repair broken code. Once you learn the basics, you\\u2019ll find that using a debugger is not only fast and easy, but it can save you from hours of frustration, and potential \\u2018bang-head-on-desk\\u2019 sessions.'\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'We\\u2019ll learn the basics of Firefox Debugger by debugging a simple to-do app. You will need Firefox to follow along. Don\\u2019t have Firefox? Check out',\n\t      ' ',\n\t      _react2.default.createElement(\n\t        _DownloadLink2.default,\n\t        { content: 'debugger-part1' },\n\t        'Firefox Developer Edition'\n\t      ),\n\t      '.'\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'Before diving in, let\\u2019s take a look at the Debugger interface. Hit',\n\t      ' ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'option-command-S'\n\t      ),\n\t      ' on Mac or',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'option-ctrl-S'\n\t      ),\n\t      ' on Windows to open the Debugger.',\n\t      ' '\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'The Debugger is divided into three panes: The source list pane, the source pane, and a tool pane.'\n\t    ),\n\t    _react2.default.createElement(_ImgCaption2.default, { src: _overview2.default, alt: 'overview', caption: 'An overview of the Firefox Debugger Panel' }),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'The source list pane shows all the JavaScript files related to the current page or project. The source pane shows the content of those files, and the tool pane contains sections for the toolbar, watch expressions, breakpoints, the the call stack.'\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'Don\\u2019t worry if you don\\u2019t understand what all of these terms and symbols mean. We\\u2019ll cover them in the following sections. Just take note of where things are so that you can follow along.'\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'Now that we\\u2019ve reviewed the Debugger interface, let\\'s use it to fix a broken to-do app.'\n\t    )\n\t  );\n\t};\n\t\n\t// images\n\t\n\t\n\tvar Homework = function Homework() {\n\t  return _react2.default.createElement(\n\t    _DevHomework2.default,\n\t    { title: 'Firefox DevTools: Hot Tip' },\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'Sometimes JavaScript code will be \\u201Cminified\\u201D so that the file size is smaller and faster to load. This is great for your users, but it can make the code impossible to read in the Debugger. Thankfully, Firefox has a great option for viewing minified code. When you view a minified file in the source pane, an icon will appear at the bottom. After clicking this icon, Debugger will format the code into something that is human-readable, and display it as a new file in the source pane.'\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'Give it a try! The link below will bring you to a to-do app that is using a minified JavaScript file. Simply:'\n\t    ),\n\t    _react2.default.createElement(\n\t      'ol',\n\t      { className: 'list' },\n\t      _react2.default.createElement(\n\t        'li',\n\t        null,\n\t        _react2.default.createElement(\n\t          'a',\n\t          {\n\t            href: 'https://mozilladevelopers.github.io/sample-todo/minified/',\n\t            target: '_blank',\n\t            rel: 'noopener noreferrer'\n\t          },\n\t          'Visit this Link'\n\t        )\n\t      ),\n\t      _react2.default.createElement(\n\t        'li',\n\t        null,\n\t        'Open Debugger (',\n\t        _react2.default.createElement(\n\t          'code',\n\t          null,\n\t          'option-command-S'\n\t        ),\n\t        ' on Mac or ',\n\t        _react2.default.createElement(\n\t          'code',\n\t          null,\n\t          'option-control-S'\n\t        ),\n\t        ' on Windows)'\n\t      ),\n\t      _react2.default.createElement(\n\t        'li',\n\t        null,\n\t        'Find and click on app.js in the source list pane'\n\t      ),\n\t      _react2.default.createElement(\n\t        'li',\n\t        null,\n\t        'Locate and click on the format icon'\n\t      )\n\t    )\n\t  );\n\t};\n\t\n\texports.default = function () {\n\t  return _react2.default.createElement(_Main2.default, { currentPageNum: 1, tutorial: _react2.default.createElement(Tutorial, null), homework: _react2.default.createElement(Homework, null) });\n\t};\n\t\n\tmodule.exports = exports['default'];\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// component---src-pages-debugger-index-js-f32a3283e4e36d462a7c.js","module.exports = __webpack_public_path__ + \"static/overview.82a986f9.png\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/debugger/img/p1/overview.png\n// module id = 542\n// module chunks = 136876265974512","import React from 'react';\nimport Main from './components/_Main';\nimport DevHomework from '../../components/layout/DevHomework';\nimport DownloadLink from '../../components/DownloadLink';\nimport ImgCaption from '../../components/ImgCaption';\n\n// images\nimport overview from './img/p1/overview.png';\n\nconst Tutorial = () => (\n  <div>\n    <h2>Introduction to Firefox Debugger</h2>\n\n    <p>\n      <strong>Stop using console.log!</strong>\n    </p>\n    <p>\n      Are you still using console.log to debug your JavaScript code? It is OK to admit. Using\n      console.log is easy and convenient, but it has limitations. It isn’t great for catching things\n      as they happen, or diving deep into code to see exactly where it is broken. To do that, you’ll\n      need a full-featured debugger. The Firefox Debugger has comprehensive tools to evaluate and\n      repair broken code. Once you learn the basics, you’ll find that using a debugger is not only\n      fast and easy, but it can save you from hours of frustration, and potential\n      ‘bang-head-on-desk’ sessions.\n    </p>\n    <p>\n      We’ll learn the basics of Firefox Debugger by debugging a simple to-do app. You will need\n      Firefox to follow along. Don’t have Firefox? Check out{' '}\n      <DownloadLink content=\"debugger-part1\">Firefox Developer Edition</DownloadLink>.\n    </p>\n    <p>\n      Before diving in, let’s take a look at the Debugger interface. Hit{' '}\n      <code>option-command-S</code> on Mac or\n      <code>option-ctrl-S</code> on Windows to open the Debugger.{' '}\n    </p>\n    <p>\n      The Debugger is divided into three panes: The source list pane, the source pane, and a tool\n      pane.\n    </p>\n    <ImgCaption src={overview} alt=\"overview\" caption=\"An overview of the Firefox Debugger Panel\" />\n    <p>\n      The source list pane shows all the JavaScript files related to the current page or project.\n      The source pane shows the content of those files, and the tool pane contains sections for the\n      toolbar, watch expressions, breakpoints, the the call stack.\n    </p>\n    <p>\n      Don’t worry if you don’t understand what all of these terms and symbols mean. We’ll cover them\n      in the following sections. Just take note of where things are so that you can follow along.\n    </p>\n    <p>Now that we’ve reviewed the Debugger interface, let's use it to fix a broken to-do app.</p>\n  </div>\n);\n\nconst Homework = () => (\n  <DevHomework title=\"Firefox DevTools: Hot Tip\">\n    <p>\n      Sometimes JavaScript code will be “minified” so that the file size is smaller and faster to\n      load. This is great for your users, but it can make the code impossible to read in the\n      Debugger. Thankfully, Firefox has a great option for viewing minified code. When you view a\n      minified file in the source pane, an icon will appear at the bottom. After clicking this icon,\n      Debugger will format the code into something that is human-readable, and display it as a new\n      file in the source pane.\n    </p>\n    <p>\n      Give it a try! The link below will bring you to a to-do app that is using a minified\n      JavaScript file. Simply:\n    </p>\n    <ol className=\"list\">\n      <li>\n        <a\n          href=\"https://mozilladevelopers.github.io/sample-todo/minified/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Visit this Link\n        </a>\n      </li>\n      <li>\n        Open Debugger (<code>option-command-S</code> on Mac or <code>option-control-S</code> on\n        Windows)\n      </li>\n      <li>Find and click on app.js in the source list pane</li>\n      <li>Locate and click on the format icon</li>\n    </ol>\n  </DevHomework>\n);\n\nexport default () => <Main currentPageNum={1} tutorial={<Tutorial />} homework={<Homework />} />;\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/debugger/index.js"],"sourceRoot":""}