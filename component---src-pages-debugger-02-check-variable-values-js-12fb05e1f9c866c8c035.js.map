{"version":3,"sources":["webpack:///component---src-pages-debugger-02-check-variable-values-js-12fb05e1f9c866c8c035.js","webpack:///./src/components/ImgCaption.js?a773","webpack:///./src/pages/debugger/02-check-variable-values.js","webpack:///./src/pages/debugger/img/p2/add.gif","webpack:///./src/pages/debugger/img/p2/hover.png","webpack:///./src/pages/debugger/img/p2/scopes.png","webpack:///./src/pages/debugger/img/p2/title.png","webpack:///./src/pages/debugger/img/p2/toolbar.png","webpack:///./src/pages/debugger/img/p2/watch.gif"],"names":["webpackJsonp","76","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","_react","_react2","_propTypes","_propTypes2","ImgCaption","props","createElement","className","dark","src","alt","caption","propTypes","string","isRequired","bool","defaultProps","226","_Main","_Main2","_DevHomework","_DevHomework2","_CodeBlock","_CodeBlock2","_ImgCaption","_ImgCaption2","_add","_add2","_hover","_hover2","_scopes","_scopes2","_toolbar","_toolbar2","_title","_title2","_watch","_watch2","Tutorial","href","target","rel","Homework","title","currentPageNum","tutorial","homework","543","p","544","545","546","547","548"],"mappings":"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","file":"component---src-pages-debugger-02-check-variable-values-js-12fb05e1f9c866c8c035.js","sourcesContent":["webpackJsonp([270304712061374],{\n\n/***/ 76:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _react = __webpack_require__(1);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _propTypes = __webpack_require__(5);\n\t\n\tvar _propTypes2 = _interopRequireDefault(_propTypes);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar ImgCaption = function ImgCaption(props) {\n\t  return _react2.default.createElement(\n\t    'div',\n\t    { className: 'img-caption ' + (props.dark ? 'img-caption--dark' : '') },\n\t    _react2.default.createElement('img', { className: 'img-caption__img', src: props.src, alt: props.alt }),\n\t    _react2.default.createElement(\n\t      'span',\n\t      { className: 'img-caption__text' },\n\t      props.caption\n\t    )\n\t  );\n\t};\n\t\n\tImgCaption.propTypes = {\n\t  src: _propTypes2.default.string.isRequired,\n\t  alt: _propTypes2.default.string.isRequired,\n\t  caption: _propTypes2.default.string.isRequired,\n\t  dark: _propTypes2.default.bool\n\t};\n\t\n\tImgCaption.defaultProps = {\n\t  dark: false\n\t};\n\t\n\texports.default = ImgCaption;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 226:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _react = __webpack_require__(1);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _Main = __webpack_require__(44);\n\t\n\tvar _Main2 = _interopRequireDefault(_Main);\n\t\n\tvar _DevHomework = __webpack_require__(12);\n\t\n\tvar _DevHomework2 = _interopRequireDefault(_DevHomework);\n\t\n\tvar _CodeBlock = __webpack_require__(15);\n\t\n\tvar _CodeBlock2 = _interopRequireDefault(_CodeBlock);\n\t\n\tvar _ImgCaption = __webpack_require__(76);\n\t\n\tvar _ImgCaption2 = _interopRequireDefault(_ImgCaption);\n\t\n\tvar _add = __webpack_require__(543);\n\t\n\tvar _add2 = _interopRequireDefault(_add);\n\t\n\tvar _hover = __webpack_require__(544);\n\t\n\tvar _hover2 = _interopRequireDefault(_hover);\n\t\n\tvar _scopes = __webpack_require__(545);\n\t\n\tvar _scopes2 = _interopRequireDefault(_scopes);\n\t\n\tvar _toolbar = __webpack_require__(547);\n\t\n\tvar _toolbar2 = _interopRequireDefault(_toolbar);\n\t\n\tvar _title = __webpack_require__(546);\n\t\n\tvar _title2 = _interopRequireDefault(_title);\n\t\n\tvar _watch = __webpack_require__(548);\n\t\n\tvar _watch2 = _interopRequireDefault(_watch);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t// images\n\tvar Tutorial = function Tutorial() {\n\t  return _react2.default.createElement(\n\t    'div',\n\t    null,\n\t    _react2.default.createElement(\n\t      'h2',\n\t      null,\n\t      'Find the Value of a Variable'\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'A good first step towards moving away from console.log is to tackle one of its primary use cases: finding the value of a variable.'\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'Let\\u2019s take a look at a simple to-do app: '\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      _react2.default.createElement(\n\t        'a',\n\t        {\n\t          href: 'https://mozilladevelopers.github.io/sample-todo/01-variables/',\n\t          target: '_blank',\n\t          rel: 'noopener noreferrer'\n\t        },\n\t        'Open to-do app in new tab.'\n\t      )\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'This app has a function called ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'addTodo'\n\t      ),\n\t      ' which will take the value of the input form, create an object, and then push that object onto an array of tasks. Let\\u2019s test it out by adding a new task. You\\u2019d expect to have this new task added to the list, but instead you see',\n\t      ' ',\n\t      '\"[object HTMLInputElement]\".',\n\t      ' '\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'Something is broken, and we need to debug the code. The temptation is to start adding console.log throughout the function, to pinpoint where the problem is. This approach might look something like this:'\n\t    ),\n\t    _react2.default.createElement(\n\t      _CodeBlock2.default,\n\t      null,\n\t      '\\nconst addTodo = e => {\\n  e.preventDefault();\\n  const title = document.querySelector(\".todo__input\");\\n  console.log(\\'title is: \\', title);\\n  const todo = { title };\\n  console.log(\\'todo is: \\', todo\\');\\n  \\n  items.push(todo);\\n  saveList();\\n  console.log(\\u2018The updated to-do list is: \\u2018, items);\\n  document.querySelector(\".todo__add\").reset();\\n};\\n      '\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'This can work, but it is cumbersome and awkward. We also have to remember to remove these lines after fixing the code. There\\u2019s a much better way to do it with Debugger using what is called a breakpoint.'\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'A breakpoint is something that signals to Debugger that we wish to pause execution at a specific place in the code. While paused, we can view the value of a variable at that particular point in the code. Using the example linked above, let\\u2019s add a breakpoint to line 13. We can do this by clicking on the number 13 to the left of the code. If done correctly, a little blue flag will appear.',\n\t      ' '\n\t    ),\n\t    _react2.default.createElement(_ImgCaption2.default, { src: _add2.default, alt: 'add breakpoint', caption: 'Adding a breakpoint' }),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'Now try adding a task. Because of the breakpoint, execution of the code will pause inside the',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'addTodo'\n\t      ),\n\t      ' function, just before line 13 is executed. We want to track the value of the ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'title'\n\t      ),\n\t      ' and ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'todo'\n\t      ),\n\t      ' variables to see why the value of the input form isn\\u2019t being used when rendering the to-do list. There are a few ways we can check the value of a variable.'\n\t    ),\n\t    _react2.default.createElement(\n\t      'h4',\n\t      null,\n\t      'Method 1: Use the console'\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'When we hit a breakpoint, and pause execution, we can use the console within the scope of where the code was paused. This means we can type ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'title'\n\t      ),\n\t      ' into the console, hit enter, and view the value of that variable.'\n\t    ),\n\t    _react2.default.createElement(\n\t      'h4',\n\t      null,\n\t      'Method 2: Hover'\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'We can also hover over the variable in the source pane to view the value of that variable. Try hovering over other items such as an object or a function. Hovering provides us with quick access to all sorts of information that can be helpful for debugging.'\n\t    ),\n\t    _react2.default.createElement(_ImgCaption2.default, { src: _hover2.default, alt: 'hover', caption: 'Hovering for information' }),\n\t    _react2.default.createElement(\n\t      'h4',\n\t      null,\n\t      'Method 3: Scope Section'\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'At the bottom right of the Firefox Debugger is a section that displays all objects that are in scope at this point in the program. The first block will list variables in the current block/function and their values.'\n\t    ),\n\t    _react2.default.createElement(_ImgCaption2.default, { src: _scopes2.default, alt: 'overview', caption: 'The scopes section in the Firefox Debugger' }),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'If you tried any of those methods while paused at line 13, you may have noticed a little problem: the title and todo variables are undefined. This is because execution has paused just before line 13, and the lines that would assign a value to those variables haven\\u2019t been executed yet. We need to continue to move through the script until those variables are assigned a value. This is where the toolbar comes in.'\n\t    ),\n\t    _react2.default.createElement(_ImgCaption2.default, { src: _toolbar2.default, alt: 'overview', caption: 'The Firefox Debugger toolbar' }),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'Here is what the toolbar buttons do:'\n\t    ),\n\t    _react2.default.createElement(\n\t      'dl',\n\t      null,\n\t      _react2.default.createElement(\n\t        'dt',\n\t        null,\n\t        'Play/Pause'\n\t      ),\n\t      _react2.default.createElement(\n\t        'dd',\n\t        null,\n\t        'Pauses or resumes execution of the script we are debugging. When it displays a \"play\" icon, that means the script is paused, either because we\\u2019ve paused it with this button or because we\\u2019ve hit a breakpoint.'\n\t      ),\n\t      _react2.default.createElement(\n\t        'dt',\n\t        null,\n\t        'Step over'\n\t      ),\n\t      _react2.default.createElement(\n\t        'dd',\n\t        null,\n\t        'Steps across the current line of JavaScript code.'\n\t      ),\n\t      _react2.default.createElement(\n\t        'dt',\n\t        null,\n\t        'Step in'\n\t      ),\n\t      _react2.default.createElement(\n\t        'dd',\n\t        null,\n\t        'Steps into the function call on the current line of JavaScript code.'\n\t      ),\n\t      _react2.default.createElement(\n\t        'dt',\n\t        null,\n\t        'Step out'\n\t      ),\n\t      _react2.default.createElement(\n\t        'dd',\n\t        null,\n\t        'Runs the script until the current function exits.'\n\t      )\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'Right now, we are going to focus on the \\u2018Step Over\\u2019 button. This will step through the code one line at a time. If it comes across a function, it will execute the entire function. This is different from the \\u2018Step In\\u2019 button which will enter into that function instead of executing it. Don\\u2019t worry about understanding the difference just yet. We\\u2019ll cover \\u2018Step In\\u2019 more in the next section.'\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'Press the \\u2018Step Over\\u2019 button once. The code is still paused, but line 14 is now highlighted. This means line 13 has executed. The ',\n\t      _react2.default.createElement(\n\t        'title',\n\t        null,\n\t        'title'\n\t      ),\n\t      ' variable is still undefined, but that is because we have paused just before line 14. Press \\u2018Step Over\\u2019 one more time and...now we are getting somewhere! We can now hover over ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'title'\n\t      ),\n\t      ' to get the value. We can also check the scope section.',\n\t      ' '\n\t    ),\n\t    _react2.default.createElement(_ImgCaption2.default, {\n\t      src: _title2.default,\n\t      alt: 'hovering over title',\n\t      caption: 'Hovering over \\'title\\' to see its value'\n\t    }),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'If we use one of the three methods to look at the value of ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'title'\n\t      ),\n\t      ', we can spot our issue. The value isn\\u2019t a string like we\\u2019d expect, but rather it is an entire object! If we hover over ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'title'\n\t      ),\n\t      ' and scroll through its different properties, we\\u2019ll find that we should have referenced the \\u2018value\\u2019 property of the object instead of the entire object itself. Fix line 14 and the app will work properly.'\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'When we are done stepping through the code, we can press the \\'Play/Pause\\' button which will resume execution of the script (until it hits another breakpoint).'\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'Phew. That was a lot of information. Try adding some other breakpoints in the app, and using the toolbar to step through the code. As you get comfortable with the basics of breakpoints and stepping through code, you will start to understand how powerful Debugger is.'\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'When you are ready, move on to the next section of the tutorial to learn more about how we can use Firefox Debugger to debug our code.'\n\t    )\n\t  );\n\t};\n\t\n\tvar Homework = function Homework() {\n\t  return _react2.default.createElement(\n\t    _DevHomework2.default,\n\t    { title: 'Firefox DevTools: Hot Tip' },\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'Another handy method for monitoring the value of a variable (or any expression) is to use the Watch Expressions section in the sidebar. You can set a watch expression by clicking \\u201CAdd Watch Expression\\u201D, and typing the expression (in this case a variable), that you\\u2019d like to watch. Using the example above, try adding an expression for \\u2018title\\u2019 and another for \\u2018todo\\u2019. Set a breakpoint on line 13, add a new todo item to trigger the breakpoint, and start stepping through the function. When a value is assigned to the variable, the value will appear in the \\u2018Watch Expressions\\u2019 section.'\n\t    ),\n\t    _react2.default.createElement(_ImgCaption2.default, {\n\t      src: _watch2.default,\n\t      alt: 'Using Watch Expressions',\n\t      caption: 'Using watch expressions',\n\t      dark: true\n\t    })\n\t  );\n\t};\n\t\n\texports.default = function () {\n\t  return _react2.default.createElement(_Main2.default, { currentPageNum: 2, tutorial: _react2.default.createElement(Tutorial, null), homework: _react2.default.createElement(Homework, null) });\n\t};\n\t\n\tmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 543:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__.p + \"static/add.f7a1c9ff.gif\";\n\n/***/ }),\n\n/***/ 544:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__.p + \"static/hover.e719d97b.png\";\n\n/***/ }),\n\n/***/ 545:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__.p + \"static/scopes.bfaf6bec.png\";\n\n/***/ }),\n\n/***/ 546:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__.p + \"static/title.29b89864.png\";\n\n/***/ }),\n\n/***/ 547:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__.p + \"static/toolbar.4500dbd2.png\";\n\n/***/ }),\n\n/***/ 548:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__.p + \"static/watch.096ea210.gif\";\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// component---src-pages-debugger-02-check-variable-values-js-12fb05e1f9c866c8c035.js","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ImgCaption = props => (\n  <div className={`img-caption ${props.dark ? 'img-caption--dark' : ''}`}>\n    <img className=\"img-caption__img\" src={props.src} alt={props.alt} />\n    <span className=\"img-caption__text\">{props.caption}</span>\n  </div>\n);\n\nImgCaption.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  caption: PropTypes.string.isRequired,\n  dark: PropTypes.bool,\n};\n\nImgCaption.defaultProps = {\n  dark: false,\n};\n\nexport default ImgCaption;\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/ImgCaption.js","import React from 'react';\nimport Main from './components/_Main';\nimport DevHomework from '../../components/layout/DevHomework';\nimport CodeBlock from '../../components/CodeBlock';\nimport ImgCaption from '../../components/ImgCaption';\n\n// images\nimport add from './img/p2/add.gif';\nimport hover from './img/p2/hover.png';\nimport scopes from './img/p2/scopes.png';\nimport toolbar from './img/p2/toolbar.png';\nimport title from './img/p2/title.png';\nimport watch from './img/p2/watch.gif';\n\nconst Tutorial = () => (\n  <div>\n    <h2>Find the Value of a Variable</h2>\n\n    <p>\n      A good first step towards moving away from console.log is to tackle one of its primary use\n      cases: finding the value of a variable.\n    </p>\n\n    <p>Let’s take a look at a simple to-do app: </p>\n\n    <p>\n      <a\n        href=\"https://mozilladevelopers.github.io/sample-todo/01-variables/\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Open to-do app in new tab.\n      </a>\n    </p>\n\n    <p>\n      This app has a function called <code>addTodo</code> which will take the value of the input\n      form, create an object, and then push that object onto an array of tasks. Let’s test it out by\n      adding a new task. You’d expect to have this new task added to the list, but instead you see{' '}\n      &quot;[object HTMLInputElement]&quot;.{' '}\n    </p>\n\n    <p>\n      Something is broken, and we need to debug the code. The temptation is to start adding\n      console.log throughout the function, to pinpoint where the problem is. This approach might\n      look something like this:\n    </p>\n\n    <CodeBlock>\n      {`\nconst addTodo = e => {\n  e.preventDefault();\n  const title = document.querySelector(\".todo__input\");\n  console.log('title is: ', title);\n  const todo = { title };\n  console.log('todo is: ', todo');\n  \n  items.push(todo);\n  saveList();\n  console.log(‘The updated to-do list is: ‘, items);\n  document.querySelector(\".todo__add\").reset();\n};\n      `}\n    </CodeBlock>\n\n    <p>\n      This can work, but it is cumbersome and awkward. We also have to remember to remove these\n      lines after fixing the code. There’s a much better way to do it with Debugger using what is\n      called a breakpoint.\n    </p>\n\n    <p>\n      A breakpoint is something that signals to Debugger that we wish to pause execution at a\n      specific place in the code. While paused, we can view the value of a variable at that\n      particular point in the code. Using the example linked above, let’s add a breakpoint to line\n      13. We can do this by clicking on the number 13 to the left of the code. If done correctly, a\n      little blue flag will appear.{' '}\n    </p>\n\n    <ImgCaption src={add} alt=\"add breakpoint\" caption=\"Adding a breakpoint\" />\n\n    <p>\n      Now try adding a task. Because of the breakpoint, execution of the code will pause inside the\n      <code>addTodo</code> function, just before line 13 is executed. We want to track the value of\n      the <code>title</code> and <code>todo</code> variables to see why the value of the input form\n      isn’t being used when rendering the to-do list. There are a few ways we can check the value of\n      a variable.\n    </p>\n\n    <h4>Method 1: Use the console</h4>\n    <p>\n      When we hit a breakpoint, and pause execution, we can use the console within the scope of\n      where the code was paused. This means we can type <code>title</code> into the console, hit\n      enter, and view the value of that variable.\n    </p>\n\n    <h4>Method 2: Hover</h4>\n    <p>\n      We can also hover over the variable in the source pane to view the value of that variable. Try\n      hovering over other items such as an object or a function. Hovering provides us with quick\n      access to all sorts of information that can be helpful for debugging.\n    </p>\n    <ImgCaption src={hover} alt=\"hover\" caption=\"Hovering for information\" />\n\n    <h4>Method 3: Scope Section</h4>\n    <p>\n      At the bottom right of the Firefox Debugger is a section that displays all objects that are in\n      scope at this point in the program. The first block will list variables in the current\n      block/function and their values.\n    </p>\n    <ImgCaption src={scopes} alt=\"overview\" caption=\"The scopes section in the Firefox Debugger\" />\n\n    <p>\n      If you tried any of those methods while paused at line 13, you may have noticed a little\n      problem: the title and todo variables are undefined. This is because execution has paused just\n      before line 13, and the lines that would assign a value to those variables haven’t been\n      executed yet. We need to continue to move through the script until those variables are\n      assigned a value. This is where the toolbar comes in.\n    </p>\n    <ImgCaption src={toolbar} alt=\"overview\" caption=\"The Firefox Debugger toolbar\" />\n\n    <p>Here is what the toolbar buttons do:</p>\n\n    <dl>\n      <dt>Play/Pause</dt>\n      <dd>\n        Pauses or resumes execution of the script we are debugging. When it displays a \"play\" icon,\n        that means the script is paused, either because we’ve paused it with this button or because\n        we’ve hit a breakpoint.\n      </dd>\n      <dt>Step over</dt>\n      <dd>Steps across the current line of JavaScript code.</dd>\n      <dt>Step in</dt>\n      <dd>Steps into the function call on the current line of JavaScript code.</dd>\n      <dt>Step out</dt>\n      <dd>Runs the script until the current function exits.</dd>\n    </dl>\n\n    <p>\n      Right now, we are going to focus on the ‘Step Over’ button. This will step through the code\n      one line at a time. If it comes across a function, it will execute the entire function. This\n      is different from the ‘Step In’ button which will enter into that function instead of\n      executing it. Don’t worry about understanding the difference just yet. We’ll cover ‘Step In’\n      more in the next section.\n    </p>\n\n    <p>\n      Press the ‘Step Over’ button once. The code is still paused, but line 14 is now highlighted.\n      This means line 13 has executed. The <title>title</title> variable is still undefined, but\n      that is because we have paused just before line 14. Press ‘Step Over’ one more time and...now\n      we are getting somewhere! We can now hover over <code>title</code> to get the value. We can\n      also check the scope section.{' '}\n    </p>\n\n    <ImgCaption\n      src={title}\n      alt=\"hovering over title\"\n      caption=\"Hovering over 'title' to see its value\"\n    />\n\n    <p>\n      If we use one of the three methods to look at the value of <code>title</code>, we can spot our\n      issue. The value isn’t a string like we’d expect, but rather it is an entire object! If we\n      hover over <code>title</code> and scroll through its different properties, we’ll find that we\n      should have referenced the ‘value’ property of the object instead of the entire object itself.\n      Fix line 14 and the app will work properly.\n    </p>\n    <p>\n      When we are done stepping through the code, we can press the 'Play/Pause' button which will\n      resume execution of the script (until it hits another breakpoint).\n    </p>\n    <p>\n      Phew. That was a lot of information. Try adding some other breakpoints in the app, and using\n      the toolbar to step through the code. As you get comfortable with the basics of breakpoints\n      and stepping through code, you will start to understand how powerful Debugger is.\n    </p>\n    <p>\n      When you are ready, move on to the next section of the tutorial to learn more about how we can\n      use Firefox Debugger to debug our code.\n    </p>\n  </div>\n);\n\nconst Homework = () => (\n  <DevHomework title=\"Firefox DevTools: Hot Tip\">\n    <p>\n      Another handy method for monitoring the value of a variable (or any expression) is to use the\n      Watch Expressions section in the sidebar. You can set a watch expression by clicking “Add\n      Watch Expression”, and typing the expression (in this case a variable), that you’d like to\n      watch. Using the example above, try adding an expression for ‘title’ and another for ‘todo’.\n      Set a breakpoint on line 13, add a new todo item to trigger the breakpoint, and start stepping\n      through the function. When a value is assigned to the variable, the value will appear in the\n      ‘Watch Expressions’ section.\n    </p>\n\n    <ImgCaption\n      src={watch}\n      alt=\"Using Watch Expressions\"\n      caption=\"Using watch expressions\"\n      dark\n    />\n  </DevHomework>\n);\n\nexport default () => <Main currentPageNum={2} tutorial={<Tutorial />} homework={<Homework />} />;\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/debugger/02-check-variable-values.js","module.exports = __webpack_public_path__ + \"static/add.f7a1c9ff.gif\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/debugger/img/p2/add.gif\n// module id = 543\n// module chunks = 270304712061374","module.exports = __webpack_public_path__ + \"static/hover.e719d97b.png\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/debugger/img/p2/hover.png\n// module id = 544\n// module chunks = 270304712061374","module.exports = __webpack_public_path__ + \"static/scopes.bfaf6bec.png\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/debugger/img/p2/scopes.png\n// module id = 545\n// module chunks = 270304712061374","module.exports = __webpack_public_path__ + \"static/title.29b89864.png\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/debugger/img/p2/title.png\n// module id = 546\n// module chunks = 270304712061374","module.exports = __webpack_public_path__ + \"static/toolbar.4500dbd2.png\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/debugger/img/p2/toolbar.png\n// module id = 547\n// module chunks = 270304712061374","module.exports = __webpack_public_path__ + \"static/watch.096ea210.gif\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/debugger/img/p2/watch.gif\n// module id = 548\n// module chunks = 270304712061374"],"sourceRoot":""}