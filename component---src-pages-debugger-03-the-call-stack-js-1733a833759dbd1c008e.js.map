{"version":3,"sources":["webpack:///component---src-pages-debugger-03-the-call-stack-js-1733a833759dbd1c008e.js","webpack:///./src/pages/debugger/03-the-call-stack.js"],"names":["webpackJsonp","226","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","_react","_react2","_Main","_Main2","_DevHomework","_DevHomework2","_CodeBlock","_CodeBlock2","Tutorial","createElement","href","target","src","alt","Homework","title","currentPageNum","tutorial","homework"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,EAASC,GAEhC,YAoBA,SAASC,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,QAASF,GAlBvFH,EAAQI,YAAa,CCPtB,IAAAE,GAAAL,EAAA,GDWKM,EAAUL,EAAuBI,GCVtCE,EAAAP,EAAA,IDcKQ,EAASP,EAAuBM,GCbrCE,EAAAT,EAAA,IDiBKU,EAAgBT,EAAuBQ,GChB5CE,EAAAX,EAAA,IDoBKY,EAAcX,EAAuBU,GClBpCE,EAAW,iBACfP,GAAAF,QAAAU,cAAA,WACER,EAAAF,QAAAU,cAAA,4BAEAR,EAAAF,QAAAU,cAAA,oKAKAR,EAAAF,QAAAU,cAAA,SACER,EAAAF,QAAAU,cAAA,KAAGC,KAAK,IAAIC,OAAO,UAAnB,+BAKFV,EAAAF,QAAAU,cAAA,8HAE2BR,EAAAF,QAAAU,cAAA,mBAF3B,iIAMAR,EAAAF,QAAAU,cAAA,mFAC0E,IACxER,EAAAF,QAAAU,cAAA,4BAFF,0TASAR,EAAAF,QAAAU,cAAA,wLAEiF,IAC/ER,EAAAF,QAAAU,cAAA,0BAHF,uIAKyCR,EAAAF,QAAAU,cAAA,0BALzC,6DASAR,EAAAF,QAAAU,cAAA,OAAKG,IAAI,+BAA+BC,IAAI,gBAE5CZ,EAAAF,QAAAU,cAAA,wPAGiDR,EAAAF,QAAAU,cAAA,0BAHjD,8GAOAR,EAAAF,QAAAU,cAAA,OAAKG,IAAI,+BAA+BC,IAAI,gBAE5CZ,EAAAF,QAAAU,cAAA,gBACMR,EAAAF,QAAAU,cAAA,0BADN,uCACiER,EAAAF,QAAAU,cAAA,oBADjE,gFAEoER,EAAAF,QAAAU,cAAA,oBAFpE,8TASAR,EAAAF,QAAAU,cAAA,gFACuE,IACrER,EAAAF,QAAAU,cAAA,4BAFF,8QAKiBR,EAAAF,QAAAU,cAAA,0BALjB,gCAKqER,EAAAF,QAAAU,cAAA,wBAAsB,IAL3F,+BAM8BR,EAAAF,QAAAU,cAAA,wBAN9B,+BAMgF,IAC9ER,EAAAF,QAAAU,cAAA,0BAPF,cAUAR,EAAAF,QAAAU,cAAA,OAAKG,IAAI,+BAA+BC,IAAI,gBAE5CZ,EAAAF,QAAAU,cAAA,sJAE6CR,EAAAF,QAAAU,cAAA,wBAF7C,6FAGmER,EAAAF,QAAAU,cAAA,qBAHnE,gCAImBR,EAAAF,QAAAU,cAAA,0BAJnB,yDAIiG,IAC/FR,EAAAF,QAAAU,cAAA,0BALF,+DAKsF,IACpFR,EAAAF,QAAAU,cAAA,qBANF,yDASAR,EAAAF,QAAAU,cAAA,OAAKG,IAAI,+BAA+BC,IAAI,gBAE5CZ,EAAAF,QAAAU,cAAA,yDAC+CR,EAAAF,QAAAU,cAAA,4BAD/C,oCAGER,EAAAF,QAAAU,cAAAF,EAAAR,QAAA,qDAHF,oBAQmBE,EAAAF,QAAAU,cAAA,qBARnB,QAQ0CR,EAAAF,QAAAU,cAAA,sBAR1C,oDASgBR,EAAAF,QAAAU,cAAA,uBAThB,6DAS+F,IAC7FR,EAAAF,QAAAU,cAAA,qBAVF,iCAWER,EAAAF,QAAAU,cAAAF,EAAAR,QAAA,oDAKAE,EAAAF,QAAAU,cAAA,8DAKAK,EAAW,iBACfb,GAAAF,QAAAU,cAAAJ,EAAAN,SAAagB,MAAM,6BACjBd,EAAAF,QAAAU,cAAA,qWAOAR,EAAAF,QAAAU,cAAA,OAAKG,IAAI,+BAA+BC,IAAI,iBD2J/CnB,GAAQK,QCvJM,iBAAME,GAAAF,QAAAU,cAAAN,EAAAJ,SAAMiB,eAAgB,EAAGC,SAAUhB,EAAAF,QAAAU,cAACD,EAAD,MAAcU,SAAUjB,EAAAF,QAAAU,cAACK,EAAD,SD2J/ErB,EAAOC,QAAUA,EAAiB","file":"component---src-pages-debugger-03-the-call-stack-js-1733a833759dbd1c008e.js","sourcesContent":["webpackJsonp([200910591484115],{\n\n/***/ 226:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _react = __webpack_require__(1);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _Main = __webpack_require__(44);\n\t\n\tvar _Main2 = _interopRequireDefault(_Main);\n\t\n\tvar _DevHomework = __webpack_require__(12);\n\t\n\tvar _DevHomework2 = _interopRequireDefault(_DevHomework);\n\t\n\tvar _CodeBlock = __webpack_require__(14);\n\t\n\tvar _CodeBlock2 = _interopRequireDefault(_CodeBlock);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar Tutorial = function Tutorial() {\n\t  return _react2.default.createElement(\n\t    'div',\n\t    null,\n\t    _react2.default.createElement(\n\t      'h2',\n\t      null,\n\t      'The Call Stack'\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'Now let\\u2019s add some functionality to our todo app. In this example we\\u2019ve added the ability to delete a task. Open the app in a new tab and follow along:'\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      _react2.default.createElement(\n\t        'a',\n\t        { href: '#', target: '_blank' },\n\t        'Open to-do app in new tab.'\n\t      )\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'Try adding a few tasks. Now try deleting the first task. It seems to be working. Now try deleting the final task. ',\n\t      _react2.default.createElement(\n\t        'em',\n\t        null,\n\t        'Uh-Oh'\n\t      ),\n\t      '. Something is not quite right. The top task is deleted from the app every time, regardless of which task we chose to delete.'\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'Let\\u2019s dive into Debugger to see what\\u2019s going on in the code. Locate the',\n\t      ' ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'removeSingle'\n\t      ),\n\t      'function on Line 44 of app.js. This is the function that handles the removal of a task. Insert a breakpoint on line 45, which will trigger right after an item is deleted. Try to delete the last item in our to-do list to trigger this breakpoint. Now we can step through the code to find the root of our problem.'\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'In the previous section, we learned how to use the \\u2018Step Over\\u2019 button to step across lines of JavaScript code. We can use the \\'Step Over\\u2019 button here, but when we reach the',\n\t      ' ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'spliceItem'\n\t      ),\n\t      'function, it will execute the function and then move on to the next line. This is great, but what if the problem exists inside that ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'spliceItem'\n\t      ),\n\t      ' function? This is where we can use the \\u2018Step In\\u2019 button.'\n\t    ),\n\t    _react2.default.createElement('img', { src: 'http://placehold.it/1000x200', alt: 'placeholder' }),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'The \\u2018Step In\\u2019 button is similar to the \\u2018Step Over\\u2019 Button, but it will allow us to step into a function for debugging, instead of executing it and moving on. Let\\u2019s use the \\u2018Step In\\u2019 button until we find ourselves on line 24, inside the ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'createList'\n\t      ),\n\t      ' function. Don\\u2019t worry if you are a bit confused about what is happening. It will all start to make sense.'\n\t    ),\n\t    _react2.default.createElement('img', { src: 'http://placehold.it/1000x500', alt: 'placeholder' }),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'The ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'createList'\n\t      ),\n\t      ' function receives an object called ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'list'\n\t      ),\n\t      ', and uses that object to create an updated to-do list. If we hover over the ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'list'\n\t      ),\n\t      ' object, we can see the list of to-do items that was provided to this function. We can also see that the item we intended to delete is still there, which means that this function was provided the wrong information. The bug is not in this function, but rather somewhere in the code before this function was invoked.'\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'On the right side of the Firefox Debugger, there is a section called',\n\t      ' ',\n\t      _react2.default.createElement(\n\t        'strong',\n\t        null,\n\t        'Call Stack'\n\t      ),\n\t      '. This section provides us with information about which functions we have stepped into, what lines those function are on, and how deep we are in the call stack. If you are following along, you should see that there are four items in the call stack. We started at the ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'spliceItem'\n\t      ),\n\t      ' function, which invoked the ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'saveList'\n\t      ),\n\t      ' ',\n\t      'function, which invoked the ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'saveList'\n\t      ),\n\t      ' function, which invoked the',\n\t      ' ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'createList'\n\t      ),\n\t      ' function.'\n\t    ),\n\t    _react2.default.createElement('img', { src: 'http://placehold.it/1000x500', alt: 'placeholder' }),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'The Call Stack section allows us to move back through the call stack so that we can figure out where this problem started. If we click on ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'saveList'\n\t      ),\n\t      ' we can see that it is a simple (and probably unnecessary) function that takes the global ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'items'\n\t      ),\n\t      ' object and passes it to the ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'createList'\n\t      ),\n\t      ' function. The bug can\\u2019t be here so let\\u2019s click on the',\n\t      ' ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'spliceItem'\n\t      ),\n\t      ' function in the call stack. Do you spot the issue here? The',\n\t      ' ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'index'\n\t      ),\n\t      ' argument is undefined! Now we are getting somewhere.'\n\t    ),\n\t    _react2.default.createElement('img', { src: 'http://placehold.it/1000x300', alt: 'placeholder' }),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'Let\\u2019s continue through the call stack to the ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'removeSingle'\n\t      ),\n\t      ' function. Look at the following:',\n\t      _react2.default.createElement(\n\t        _CodeBlock2.default,\n\t        null,\n\t        '\\nconst index = el.dataset.number;\\n        '\n\t      ),\n\t      'If we hover over ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'index'\n\t      ),\n\t      ' (or ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'number'\n\t      ),\n\t      '), we see that it is undefined. If we hover over ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'dataset'\n\t      ),\n\t      ' we\\u2019ll see that there is no number property. There is only',\n\t      ' ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'index'\n\t      ),\n\t      '. A typo! The line should say:',\n\t      _react2.default.createElement(\n\t        _CodeBlock2.default,\n\t        null,\n\t        '\\nconst index = el.dataset.index;\\n        '\n\t      ),\n\t      _react2.default.createElement(\n\t        'p',\n\t        null,\n\t        'Once this is fixed, everything starts working.'\n\t      )\n\t    )\n\t  );\n\t};\n\t\n\tvar Homework = function Homework() {\n\t  return _react2.default.createElement(\n\t    _DevHomework2.default,\n\t    { title: 'Firefox DevTools: Hot Tip' },\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'It was easy to find the function in this example, but what if we had fifty functions across multiple files? Thankfully, you can search for a function in the source pane. Just hit shift-command-O on Mac or shift-control-O on Windows to bring up a search field in the source pane. You can search for a function or arrow through the provided list.'\n\t    ),\n\t    _react2.default.createElement('img', { src: 'http://placehold.it/1000x500', alt: 'placeholder' })\n\t  );\n\t};\n\t\n\texports.default = function () {\n\t  return _react2.default.createElement(_Main2.default, { currentPageNum: 3, tutorial: _react2.default.createElement(Tutorial, null), homework: _react2.default.createElement(Homework, null) });\n\t};\n\t\n\tmodule.exports = exports['default'];\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// component---src-pages-debugger-03-the-call-stack-js-1733a833759dbd1c008e.js","import React from 'react';\nimport Main from './components/_Main';\nimport DevHomework from '../../components/layout/DevHomework';\nimport CodeBlock from '../../components/CodeBlock';\n\nconst Tutorial = () => (\n  <div>\n    <h2>The Call Stack</h2>\n\n    <p>\n      Now let’s add some functionality to our todo app. In this example we’ve added the ability to\n      delete a task. Open the app in a new tab and follow along:\n    </p>\n\n    <p>\n      <a href=\"#\" target=\"_blank\">\n        Open to-do app in new tab.\n      </a>\n    </p>\n\n    <p>\n      Try adding a few tasks. Now try deleting the first task. It seems to be working. Now try\n      deleting the final task. <em>Uh-Oh</em>. Something is not quite right. The top task is deleted\n      from the app every time, regardless of which task we chose to delete.\n    </p>\n\n    <p>\n      Let’s dive into Debugger to see what’s going on in the code. Locate the{' '}\n      <code>removeSingle</code>\n      function on Line 44 of app.js. This is the function that handles the removal of a task. Insert\n      a breakpoint on line 45, which will trigger right after an item is deleted. Try to delete the\n      last item in our to-do list to trigger this breakpoint. Now we can step through the code to\n      find the root of our problem.\n    </p>\n\n    <p>\n      In the previous section, we learned how to use the ‘Step Over’ button to step across lines of\n      JavaScript code. We can use the 'Step Over’ button here, but when we reach the{' '}\n      <code>spliceItem</code>\n      function, it will execute the function and then move on to the next line. This is great, but\n      what if the problem exists inside that <code>spliceItem</code> function? This is where we can\n      use the ‘Step In’ button.\n    </p>\n\n    <img src=\"http://placehold.it/1000x200\" alt=\"placeholder\" />\n\n    <p>\n      The ‘Step In’ button is similar to the ‘Step Over’ Button, but it will allow us to step into a\n      function for debugging, instead of executing it and moving on. Let’s use the ‘Step In’ button\n      until we find ourselves on line 24, inside the <code>createList</code> function. Don’t worry\n      if you are a bit confused about what is happening. It will all start to make sense.\n    </p>\n\n    <img src=\"http://placehold.it/1000x500\" alt=\"placeholder\" />\n\n    <p>\n      The <code>createList</code> function receives an object called <code>list</code>, and uses\n      that object to create an updated to-do list. If we hover over the <code>list</code> object, we\n      can see the list of to-do items that was provided to this function. We can also see that the\n      item we intended to delete is still there, which means that this function was provided the\n      wrong information. The bug is not in this function, but rather somewhere in the code before\n      this function was invoked.\n    </p>\n\n    <p>\n      On the right side of the Firefox Debugger, there is a section called{' '}\n      <strong>Call Stack</strong>. This section provides us with information about which functions\n      we have stepped into, what lines those function are on, and how deep we are in the call stack.\n      If you are following along, you should see that there are four items in the call stack. We\n      started at the <code>spliceItem</code> function, which invoked the <code>saveList</code>{' '}\n      function, which invoked the <code>saveList</code> function, which invoked the{' '}\n      <code>createList</code> function.\n    </p>\n\n    <img src=\"http://placehold.it/1000x500\" alt=\"placeholder\" />\n\n    <p>\n      The Call Stack section allows us to move back through the call stack so that we can figure out\n      where this problem started. If we click on <code>saveList</code> we can see that it is a\n      simple (and probably unnecessary) function that takes the global <code>items</code> object and\n      passes it to the <code>createList</code> function. The bug can’t be here so let’s click on the{' '}\n      <code>spliceItem</code> function in the call stack. Do you spot the issue here? The{' '}\n      <code>index</code> argument is undefined! Now we are getting somewhere.\n    </p>\n\n    <img src=\"http://placehold.it/1000x300\" alt=\"placeholder\" />\n\n    <p>\n      Let’s continue through the call stack to the <code>removeSingle</code> function. Look at the\n      following:\n      <CodeBlock>\n        {`\nconst index = el.dataset.number;\n        `}\n      </CodeBlock>\n      If we hover over <code>index</code> (or <code>number</code>), we see that it is undefined. If\n      we hover over <code>dataset</code> we’ll see that there is no number property. There is only{' '}\n      <code>index</code>. A typo! The line should say:\n      <CodeBlock>\n        {`\nconst index = el.dataset.index;\n        `}\n      </CodeBlock>\n      <p>Once this is fixed, everything starts working.</p>\n    </p>\n  </div>\n);\n\nconst Homework = () => (\n  <DevHomework title=\"Firefox DevTools: Hot Tip\">\n    <p>\n      It was easy to find the function in this example, but what if we had fifty functions across\n      multiple files? Thankfully, you can search for a function in the source pane. Just hit\n      shift-command-O on Mac or shift-control-O on Windows to bring up a search field in the source\n      pane. You can search for a function or arrow through the provided list.\n    </p>\n\n    <img src=\"http://placehold.it/1000x500\" alt=\"placeholder\" />\n  </DevHomework>\n);\n\nexport default () => <Main currentPageNum={3} tutorial={<Tutorial />} homework={<Homework />} />;\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/debugger/03-the-call-stack.js"],"sourceRoot":""}